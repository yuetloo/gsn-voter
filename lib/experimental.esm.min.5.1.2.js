import{ethers as n}from"ethers";const t=new n.utils.Logger("experimental/5.0.0");class e extends n.Signer{constructor(i){t.checkNew(new.target,e),super(),this._deltaCount=0,n.utils.defineReadOnly(this,"signer",i)}get provider(){return this.signer.provider}connect(n){return new e(this.signer.connect(n))}getAddress(){return this.signer.getAddress()}getTransactionCount(n){if("pending"===n){this._initialPromise||(this._initialPromise=this.signer.getTransactionCount("pending"));const n=this._deltaCount;return this._initialPromise.then(t=>t+n)}return this.signer.getTransactionCount(n)}setTransactionCount(t){this._initialPromise=Promise.resolve(t).then(t=>n.BigNumber.from(t).toNumber()),this._deltaCount=0}incrementTransactionCount(n){this._deltaCount+=n||1}signMessage(n){return this.signer.signMessage(n)}signTransaction(n){return this.signer.signTransaction(n)}sendTransaction(t){return null==t.nonce?((t=n.utils.shallowCopy(t)).nonce=this.getTransactionCount("pending"),this.incrementTransactionCount()):this.setTransactionCount(t.nonce),this.signer.sendTransaction(t).then(n=>n)}}export{e as NonceManager};
